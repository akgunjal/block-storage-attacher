/*
# Licensed Materials - Property of IBM
#
# (C) Copyright IBM Corp. 2017 All Rights Reserved
#
# US Government Users Restricted Rights - Use, duplicate or
# disclosure restricted by GSA ADP Schedule Contract with
# IBM Corp.
# encoding: utf-8
*/

package e2e

import (
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	//commontest "github.ibm.com/alchemy-containers/armada-storage-e2e/common"
	"github.ibm.com/alchemy-containers/armada-storage-e2e/framework"
	clientset "k8s.io/client-go/kubernetes"
	//"k8s.io/client-go/pkg/api/v1"
	"os"
 //      "fmt"
	"os/exec"
//       "bytes"
)

var _ = framework.KubeDescribe("Volume [Feature:VolumeCreation]", func() {
	f := framework.NewDefaultFramework("armada-portworx")
	// filled in BeforeEach
	var c clientset.Interface
	var ns string

	BeforeEach(func() {
		c = f.ClientSet
		ns = f.Namespace.Name
	})

	framework.KubeDescribe("PortWorx Volume Creation ", func() {
		It("Volume  creation", func() {
			By("Volume Creation")
			gopath := os.Getenv("GOPATH")
			pvfilepath := "src/github.ibm.com/alchemy-containers/armada-storage-e2e/e2e-tests/pv-muraliportworx.yaml"
			ymlscriptpath := "src/github.ibm.com/alchemy-containers/armada-storage-e2e/e2e-tests/mkpvyaml"
			pvfilepath = gopath + "/" + pvfilepath
	                filestatus, err := fileExists(pvfilepath)
		//		Expect(err).NotTo(HaveOccurred())
				if filestatus == true {
					//os.Remove(pvfilepath)
					By("Volume Creation")
				}
			ymlscriptpath = gopath + "/" + ymlscriptpath
                      //  env := os.Environ()
/*			cmd := exec.Command(ymlscriptpath)
			cmd.Stdout = os.Stdout
			cmd.Stderr = os.Stderr
			By("Volume Creation1")
			cmd.Run()*/

			filestatus, err = fileExists(pvfilepath)
			Expect(err).NotTo(HaveOccurred())

	                /* Static PV Creation */

                       if filestatus == true {
                           pvscriptpath := "src/github.ibm.com/alchemy-containers/armada-storage-e2e/e2e-tests/utilscript.sh"
                           pvscriptpath = gopath + "/" + pvscriptpath
                           //args := []string{"pvcreate",$pvscriptpath}
                           cmd := exec.Command(pvscriptpath, "pvcreate", "$pvfilepath")
                            
                           //cmd := exec.Command(pvscriptpath, args, env)
                         /*  var stdout, stderr bytes.Buffer
                           cmd.Stdout = &stdout
                           cmd.Stderr = &stderr*/
                            cmd.Stdout = os.Stdout
                        cmd.Stderr = os.Stderr

                           err := cmd.Run()
                           Expect(err).NotTo(HaveOccurred())
                          // outStr, errStr := string(stdout.Bytes()), string(stderr.Bytes())
                           //fmt.Printf("out:\n%s\nerr:\n%s\n", outStr, errStr) 
                       }
	
                  })
	})
})

func fileExists(filename string) (bool, error) {
	if _, err := os.Stat(filename); err != nil {
		if os.IsNotExist(err) {
			return false, err
		}
	}
	return true, nil
}
